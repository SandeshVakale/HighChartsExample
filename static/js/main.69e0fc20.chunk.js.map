{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["options","optionsKm","rows","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","formControl","margin","minWidth","selectEmpty","marginTop","table","StyledTableCell","withStyles","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","action","hover","TableRow","Link","ButtonAppBar","classes","useState","data","setData","continent","setContinent","name","state","setState","metric","setMetric","chartMax","setChartMax","disabled","setDisabled","getContinents","arrayData","geonames","map","value","continentName","filterData","filter","index","indexOf","sort","createData","CountryName","Population","Area","handledata","data_filter","total","totalKm","parseInt","population","areaInSqKm","text","chart","type","series","countryName","y","parseFloat","console","log","i","fetchData","a","fetch","api_call","json","useEffect","document","className","AppBar","position","Toolbar","Typography","variant","Button","onClick","FormControl","InputLabel","htmlFor","Select","native","age","onChange","event","target","inputProps","id","key","highcharts","PieChart","TableContainer","component","Paper","Table","aria-label","TableHead","align","TableBody","row","scope","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.69e0fc20.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport PieChart from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'\n\n\nlet options = []\nlet optionsKm = []\nlet rows = []\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n    table: {\n        minWidth: 700,\n    },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\nconst Link = \"http://api.geonames.org/countryInfoJSON?formatted=true&username=hydrane\"\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n  const [data, setData] = useState(0);\n  const [continent, setContinent] = useState(0);\n  const [state, setState] = useState({\n    continent: '',\n    name: '',\n  });\n    const [metric, setMetric] = useState({\n        metric: 'ALL',\n        name: '',\n    });\n    const [chartMax, setChartMax] = useState({\n        chartMax: '5',\n        name: '',\n    });\n    const [disabled, setDisabled] = useState(true);\n  const handleChangeContinent = (event) => {\n    const name = event.target.name;\n    setState({\n      ...state,\n      [name]: event.target.value,\n    });\n      handledata(event.target.value)\n  };\n\n   const handleChangeMetric = (event) => {\n        const name = event.target.name;\n       setMetric({\n            ...metric,\n            [name]: event.target.value,\n        });\n    };\n\n    const handleChangeChartMax = (event) => {\n        const name = event.target.name;\n        setChartMax({\n            ...chartMax,\n            [name]: event.target.value,\n        });\n    };\n\n  const getContinents = (data) => {\n      let arrayData = data && data.geonames.map((value) => value.continentName)\n      let filterData = arrayData.filter((value, index) => arrayData.indexOf(value) === index)\n        //console.log('filterData', filterData.sort())\n        setContinent(filterData.sort())\n\n  }\n    function createData(continentName, CountryName, Population, Area) {\n        return { continentName, CountryName, Population, Area };\n    }\n\n  const handledata = (continent) => {\n\n      if (continent === 'ALL') {\n          let data_filter = data && data.geonames\n          let total = 0\n          let totalKm = 0\n          data_filter && data_filter.map((value)  => {\n              total = total + parseInt(value.population)\n          })\n          data_filter && data_filter.map((value)  => {\n              totalKm = totalKm + parseInt(value.areaInSqKm)\n          })\n          options =   {\n              title: {\n                  text: 'Population'\n              },\n              chart: {\n                  type: 'pie',\n              },\n              series: [{\n                  data:\n                      data_filter && data_filter.map((value) => {\n                          return {\n                              name: value.countryName,\n                              y: (parseFloat(value.population) / total) * 100\n                          }\n                      })\n              }]\n          }\n\n          rows = data_filter && data_filter.map((value) => {\n              return createData(value.continentName, value.countryName, (parseFloat(value.population) / total) * 100, (parseFloat(value.areaInSqKm) / totalKm) * 100)\n          })\n          optionsKm =   {\n              title: {\n                  text: 'Area Square Meter'\n              },\n              chart: {\n                  type: 'pie',\n              },\n              series: [{\n                  data:\n                      data_filter && data_filter.map((value) => {\n                          return {\n                              name: value.countryName,\n                              y: (parseFloat(value.areaInSqKm) / totalKm) * 100\n                          }\n                      })\n              }]\n          }\n\n      } else {\n          let data_filter = data.geonames.filter((value) => value.continentName === continent)\n          let total = 0\n          let totalKm = 0\n          data_filter && data_filter.map((value)  => {\n              total = total + parseInt(value.population)\n          })\n          console.log(total)\n          data_filter && data_filter.map((value)  => {\n              totalKm = totalKm + parseInt(value.areaInSqKm)\n          })\n          rows = data_filter && data_filter.map((value) => {\n              return createData(value.continentName, value.countryName, (parseFloat(value.population) / total) * 100, (parseFloat(value.areaInSqKm) / totalKm) * 100)\n          })\n          options =   {\n              title: {\n                  text: 'Population'\n              },\n              chart: {\n                  type: 'pie',\n              },\n              series: [{\n                  data:\n                      data_filter && data_filter.map((value, i) => {\n                          return {\n                              name: value.countryName,\n                              y: (parseFloat(value.population) / total) * 100\n                          }\n                      })\n              }]\n          }\n          optionsKm =   {\n              title: {\n                  text: 'Area Square Meter'\n              },\n              chart: {\n                  type: 'pie',\n              },\n              series: [{\n                  data:\n                      data_filter && data_filter.map((value) => {\n                          return {\n                              name: value.countryName,\n                              y: (parseFloat(value.areaInSqKm) / totalKm) * 100\n                          }\n                      })\n              }]\n          }\n      }\n\n    }\n\n  async function fetchData() {\n        const api_call = await fetch(Link);\n        const data = await api_call.json();\n        setData(data)\n      getContinents(data);\n    }\n\n  const onPressGo = () => {\n      fetchData()\n      setDisabled(false)\n  }\n\n  useEffect( () => {\n    document.title = \"Frontend Dev CS\"\n    fetchData();\n    handledata('ALL')\n  }, []);\n  return (\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h1\" className={classes.title}>\n              Frontend Dev CS\n            </Typography>\n            <Button color=\"inherit\" onClick={onPressGo}>Go</Button>\n          </Toolbar>\n        </AppBar>\n        <FormControl className={classes.formControl} disabled={disabled}>\n          <InputLabel htmlFor=\"age-native-simple\">Continent</InputLabel>\n          <Select\n              native\n              value={state.age}\n              onChange={handleChangeContinent}\n              inputProps={{\n                name: 'continent',\n                id: 'continent-native-simple',\n              }}\n          >\n            <option value={'ALL'}>ALL</option>\n            {continent && continent.map((value, i) =>  <option key={i} value={value}>{value}</option>)}\n          </Select>\n        </FormControl>\n        <FormControl className={classes.formControl} disabled={disabled}>\n          <InputLabel htmlFor=\"age-native-simple\">Metric</InputLabel>\n          <Select\n              native\n              value={state.age}\n              onChange={handleChangeMetric}\n              inputProps={{\n                name: 'metric',\n                id: 'metric-native-simple',\n              }}\n          >\n              <option value={'ALL'}>ALL</option>\n              <option value={'areaInSqKm'}>areaInSqKm</option>\n              <option value={'population'}>population</option>\n          </Select>\n        </FormControl>\n        <FormControl className={classes.formControl} disabled={disabled}>\n          <InputLabel htmlFor=\"age-native-simple\">chart max</InputLabel>\n          <Select\n              native\n              value={state.age}\n              onChange={handleChangeChartMax}\n              inputProps={{\n                name: 'chart max',\n                id: 'chart-max-native-simple',\n              }}\n          >\n              <option value={'5'}>5</option>\n              <option value={'10'}>10</option>\n              <option value={'15'}>15</option>\n              <option value={'20'}>20</option>\n          </Select>\n        </FormControl>\n          {(metric.metric === 'ALL' || metric.metric === 'population') && <HighchartsReact highcharts={PieChart} options={options} />}\n          {(metric.metric === 'ALL' || metric.metric === 'areaInSqKm') && <HighchartsReact highcharts={PieChart} options={optionsKm} />}\n\n          <TableContainer component={Paper}>\n              <Table className={classes.table} aria-label=\"customized table\">\n                  <TableHead>\n                      <TableRow>\n                          <StyledTableCell>Continent</StyledTableCell>\n                          <StyledTableCell align=\"right\">Country</StyledTableCell>\n                          {(metric.metric === 'ALL' || metric.metric === 'population') &&  <StyledTableCell align=\"right\">Population</StyledTableCell>}\n                          {(metric.metric === 'ALL' || metric.metric === 'areaInSqKm') && <StyledTableCell align=\"right\">Area</StyledTableCell>}\n                      </TableRow>\n                  </TableHead>\n                  <TableBody>\n                      {rows && rows.map((row) => (\n                          <StyledTableRow key={row.name}>\n                              <StyledTableCell component=\"th\" scope=\"row\">\n                                  {row.continentName}\n                              </StyledTableCell>\n                              <StyledTableCell align=\"right\">{row.CountryName}</StyledTableCell>\n                              {(metric.metric === 'ALL' || metric.metric === 'population') && <StyledTableCell align=\"right\">{row.Population}</StyledTableCell>}\n                              {(metric.metric === 'ALL' || metric.metric === 'areaInSqKm') &&  <StyledTableCell align=\"right\">{row.Area}</StyledTableCell>}\n                          </StyledTableRow>\n                      ))}\n                      <StyledTableRow>\n                          <StyledTableCell component=\"th\" scope=\"row\">\n\n                          </StyledTableCell>\n                          <StyledTableCell align=\"right\">Total</StyledTableCell>\n                          {(metric.metric === 'ALL' || metric.metric === 'population') && <StyledTableCell align=\"right\">100</StyledTableCell>}\n                          {(metric.metric === 'ALL' || metric.metric === 'areaInSqKm') &&  <StyledTableCell align=\"right\">100</StyledTableCell>}\n                      </StyledTableRow>\n\n                  </TableBody>\n              </Table>\n          </TableContainer>\n      </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}